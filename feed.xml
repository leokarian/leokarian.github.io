<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.3.3">Jekyll</generator><link href="https://leokarian.github.io/feed.xml" rel="self" type="application/atom+xml"/><link href="https://leokarian.github.io/" rel="alternate" type="text/html" hreflang="en"/><updated>2024-04-07T21:29:03+00:00</updated><id>https://leokarian.github.io/feed.xml</id><title type="html">blank</title><entry><title type="html">Post Title</title><link href="https://leokarian.github.io/blog/2024/creating-snippet-in-pycharm/" rel="alternate" type="text/html" title="Post Title"/><published>2024-03-25T22:01:57+00:00</published><updated>2024-03-25T22:01:57+00:00</updated><id>https://leokarian.github.io/blog/2024/creating-snippet-in-pycharm</id><content type="html" xml:base="https://leokarian.github.io/blog/2024/creating-snippet-in-pycharm/"><![CDATA[Test]]></content><author><name></name></author><category term="posts"/><category term="tag1"/><category term="tag2"/><category term="tagN"/><summary type="html"><![CDATA[Post Description]]></summary></entry><entry><title type="html">Docker Cheatsheet</title><link href="https://leokarian.github.io/blog/2024/docker-cheatsheet/" rel="alternate" type="text/html" title="Docker Cheatsheet"/><published>2024-02-20T10:00:00+00:00</published><updated>2024-02-20T10:00:00+00:00</updated><id>https://leokarian.github.io/blog/2024/docker-cheatsheet</id><content type="html" xml:base="https://leokarian.github.io/blog/2024/docker-cheatsheet/"><![CDATA[# What is Docker? --- Docker is the technology that provides for operating system level virtualization, known as *containers*. It is important to note that this is not the same as *hardware virtualization*. Docker uses the resource ==isolation== features of the Linux kernel, such as cgroups, kernel namespaces, and OverlayFS, all within the same physical or virtual machine. OverlayFS is a union-capable filesystem that combines several files and directories into one in order to run multiple applications that are isolated and contained from one other, all within the same physical or virtual machine. While containerization has exploded in popularity over the past couple of years, the concept of containerization actually goes back to the 1970s. (1979: chroot; 2000: FreeBSD Jails; 2005: OpenVZ; 2006: cgroups; 2008: LXC) {% raw %} <br> <br> {% endraw %} # Docker and Kubernetes --- Kubernetes is an orchestrator for running containers and maintaining their lifecycle. Docker is multi-purpose software that can not only build container images but also run containers. While Docker can run and maintain lifecycles of containers not only on single nodes but also on multiple nodes using Docker Compose and Docker Swarm, Kubernetes has emerged as the de facto standard for container orchestration. Docker and Kubernetes are complementary. Docker builds the container images while Kubernetes orchestrates the running of those containers. Kubernetes can also schedule running replicas of the containers over many nodes {% raw %} <br> <br> {% endraw %} # Keywords from Docker Infrastructure --- There are different terms that are associated with Docker: ## Container Layer A *layer* is a modification applied to a [[#Docker Image]] as represented by an instruction in a *Dockerfile*. Typically, a layer is created when a base image is changed. For example, consider a *Dockerfile* that looks like this: ```dockerfile FROM ubuntu Run mkdir /tmp/logs RUN apt-get install vim RUN apt-get install htop ``` In this case, Docker will consider the ubuntu image as the ***base image*** and add three layers: 1. One layer for creating `/tmp/logs` 2. One other layer that installs `vim` 3. A third layer that installs `htop` When Docker builds the image, each layer is stacked one upon the other and merged into a single layer using the union filesystem. Layers are *uniquely* identified using SHA-256 hashes. This makes it easy to reuse and cache them. ## Docker Image Docker image is a ***read-only template*** that forms the foundation of your application. A Docker image starts off with a base image—typically the one selected is of an operating system you are most familiar with, such as Ubuntu. On top of this image, you can add build your application stack, adding the packages as and when required. Docker images are created using a series of commands known as ***instructions*** in a file known as the ***Dockerfile***. The presence of a Dockerfile in the root of a project repository is a good indicator that the program is container-friendly. Docker image is (like) the final executable package that includes everything needed to run an application: the source code, the required libraries, and the dependencies. ## Docker Tags A tag is a name that uniquely identifies a specific version of a Docker Image. Tags are plain text labels, often used to identify specific details, such as the version, the base OS of the image, or the architecture of the Docker image. Tagging a Docker image gives you the flexibility to refer uniquely to a specific version, making it easier to roll back to previous versions of a Docker image if the current image is not working as expected. ## Docker Container A Docker image, when run in a host computer, spawns a process with its own namespace and is known as a ***Docker container***. The main difference between a Docker image and a container is the presence of a thin read-write layer known as the ***[[#Container Layer]]***. Any changes made to the filesystem of a container (such as writing new files or modifying existing files) are made to this writable container layer. Applications running in a Docker container see a single filesystem that they can read from and write to in the usual way for the operating system. Each container has its own writable layer on top of all the read-only layers, so every container can modify its own data without affecting any other containers. ![[Pasted image 20240219154108.png]] Each container's filesystem is isolated, so one container doesn't see any changes made by another container. ## Volumes, Bind Mounts and `tmpfs` Volumes Docker provides different ways to mount data and share this data between containers and the Docker host: volumes, bind mounts, or tmpfs volumes. By default all files created inside a container are stored on a writable container layer. This means that: - The data doesn't persist when that container no longer exists, and it can be difficult to get the data out of the container if another process needs it. - A container's writable layer is tightly coupled to the host machine where the container is running. You can't easily move the data somewhere else. - Writing into a container's writable layer requires a storage driver to manage the filesystem. The storage driver provides a union filesystem, using the Linux kernel. This extra abstraction reduces performance as compared to using _data volumes_, which write directly to the host filesystem. An easy way to visualize the difference among volumes, bind mounts, and `tmpfs` mounts is to think about where the data lives on the Docker host. ![[Pasted image 20240219184845.png]] - Volumes are stored in a part of the host filesystem which is _managed by Docker_ (`/var/lib/docker/volumes/` on Linux). Non-Docker processes should not modify this part of the filesystem. Volumes are the best way to persist data in Docker. - Bind mounts may be stored anywhere on the host system. They may even be important system files or directories. Non-Docker processes on the Docker host or a Docker container can modify them at any time. - `tmpfs` mounts are stored in the host system's memory only, and are never written to the host system's filesystem. Volumes are separate from containers, so they can be shared with other containers even if the source container isn't running. Sharing data between containers like this is very useful, you can run a task container that takes a backup of data or log files from a long-running background container. The default access for volumes is to be *writeable*, but that could edit data and break the application running in the source container. Docker lets you mount volumes from another container in the *read-only* mode instead by adding the :ro flag to the name of the container in the `--volumes-from` option. This is a safer way to access data if you want to read it without making changes. ## Docker Repository A Docker Repository is a place where you can upload and store Docker images. These repositories allow for easy distribution of Docker images within your company or with the public. ## Docker Registry Docker Repositories need a central place to store the data—this central place is a Docker Registry. A Docker Registry is a collection of various Docker repositories. Docker Registries are hosted by third-party companies, or you can self-host them if you need to meet more strict compliance requirements. Docker Hub is a commonly used Docker Registry. The important distinction between docker repository and docker registry is that **a registry is a collection of repositories, while repositories hold a collection of related images**. ## Dockerfile A *Dockerfile* is a file with a set of instructions that tells Docker how to build an image. This is the file that describes the application and tells Docker how to build it into an image. The Dockerfile has two main purposes: 1. To describe the application 2. To tell Docker how to containerize the application (create an image with the app inside) All Dockerfiles start with the FROM instruction. This will be the base layer of the image, and the rest of the app will be added on top as additional layers. A typical Dockerfile includes the following: - A `FROM` instruction that instructs Docker what the base image is - An `ENV` instruction to pass an environment variable - A `RUN` instruction to run some shell commands (for example, to install dependent programs that are not available in the base image) - A `CMD` or an `ENTRYPOINT` instruction that tells Docker what executable is to be run when a container is started ## Docker Engine Docker engine is a core part of Docker. Docker Engine is a client-server application that provides the platform, the runtime, and the tooling for building and managing Docker images, Docker containers, and many more. Docker Engine provides the following: ### *Docker Daemon* The Docker daemon is a service that runs in the background of the host computer and handles the heavy lifting of most of the Docker commands. The daemon listens for API requests for creating and managing Docker objects such as containers, networks, and volumes. Docker daemon can also talk to other daemons for managing and monitoring Docker containers. Some examples of inter-daemon communication include communication Datadog for container metrics monitoring and Aqua for container security monitoring. ### *Docker CLI* Docker CLI is the primary way that you interact with Docker. Docker CLI exposes a set of commands that you can provide. The Docker CLI forwards the request to Docker daemon, which performs the necessary work. While the Docker CLI includes a huge variety of commands and subcommands, the most common commands are: - `docker build` - `docker pull` - `docker run` - `docker exec` - `docker images` - `docker container` - `docker help [command]` - ### *Docker API* Docker also provides an API for interacting with the Docker engine. This is particularly useful if there’s a need to create or manage containers from within applications. Almost every operation supported by the Docker CLI can be done via the API. The simplest way to get started with the Docker API is to use curl to send an API request. ## Docker Compose Docker Compose is a tool for defining and running multi-container applications. These microservices and applications are designed using a single YAML file and can be built, run, and scaled, each via a single command. Much like how Docker allows you to build an image for your application and run it in your container, Compose uses the same images in combination with a definition file (known as the compose file) to build, launch, and run multi-container applications, including dependent and linked containers. The most common use case for Docker Compose is to run applications and their dependent services (such as databases and caching providers) in a same simple, streamlined manner as running a single container application. ## Docker Machine Docker Machine is a tool for installing Docker engines on multiple virtual hosts and for managing the hosts. Docker Machine allows for creating Docker hosts on local as well as remote systems, including on cloud platforms such as Amazon Web Services, DigitalOcean, or Microsoft Azure. {% raw %} <br> <br> {% endraw %} # Docker core commands (and most used) --- Note: All this commands were executed using Powershell 7.3 in Windows 11 with Docker Desktop 4.27.2 (137060) installed on it. Same commands could vary its output usign others docker versions or operating systems like Linux or iOS. #### - `docker --version` : *display docker version* ```powershell PS C:\> docker --version Docker version 25.0.3, build 4debf41 ``` #### - `docker info`: *display system-wide information* ```powershell PS C:\Users\Leok> docker info Client: Version: 25.0.3 Context: default Debug Mode: false Plugins: ... Server: Containers: 4 Running: 1 Paused: 0 Stopped: 3 Images: 4 Server Version: 25.0.3 ... Kernel Version: 5.15.133.1-microsoft-standard-WSL2 Operating System: Docker Desktop OSType: linux Architecture: x86_64 Total Memory: 7.612GiB Name: docker-desktop ... ``` {% raw %} <br> {% endraw %} ## Docker Hub Docker Hub is a service provided by Docker for finding and sharing container images with your team. It's the main registry for Docker. #### - `docker login -u <username>`: *login into Docker* ```powershell PS C:\> docker login -u leokarian Password: Login Succeeded ``` #### - `docker search <image_name>`: *search an image in Docker Hub* ```powershell PS C:\> docker search alpine NAME DESCRIPTION STARS OFFICIAL alpine A minimal Docker image based on Alpine … 10685 [OK] alpinelinux/d... Simple and lightweight Alpine Linux … 10 alpinelinux/a... Build Alpine Linux packages with Gi … 3 alpinelinux/g... Helper image container gitlab-runner- … 7 ... ``` #### - `docker pull <image_name>`: *Pull an image from a Docker Hub* ```powershell PS C:\> docker pull alpine Using default tag: latest latest: Pulling from library/alpine 4abcf2066143: Already exists Digest: sha256:c5b1261d6d3e43071626931fc004f70149baeba2c8ec672bd4f27761f8e1ad6b Status: Downloaded newer image for alpine:latest docker.io/library/alpine:latest ``` #### - `docker push <username>/<image_name>`: *Publish an image to Docker Hub* ```powershell PS C:\> docker images REPOSITORY TAG IMAGE ID CREATED SIZE leokarian/bash latest 31fd62009f12 5 weeks ago 14MB PS C:\> docker push leokarian/bash Using default tag: latest The push refers to repository [docker.io/leokarian/bash] a18d96cdeb2c: Mounted from library/bash c57fa6126e06: Mounted from library/bash d4fc045c9e3a: Mounted from library/bash latest: digest: sha256:61ccf179aac4e25eb5f41ddf20149061d0672a9909b5632ecd3ddcfa5971f476 size: 946 ``` ![[Pasted image 20240220154132.png]] {% raw %} <br> {% endraw %} ## Docker Images Docker images are a lightweight, standalone, executable package of software that includes everything needed to run an application: code, runtime, system tools, system libraries and settings. #### - `docker build -t .`: *Build an Image from a Dockerfile* {% highlight powershell %} PS C:\> docker build -t . {% endhighlight %} #### - `docker build -t . --no-cache`: *Build an Image from a Dockerfile without the cache* ```powershell PS C:\> docker build -t . --no-cache ``` #### - `docker images`: *List local images* ```powershell PS C:\> docker images ``` #### - `docker rmi <image_name>`: *Delete an Image* ```powershell PS C:\> docker rmi -t . ``` #### - `docker rmi $(docker images --filter “dangling=true” -q --no-trunc)`: *Delete untagged images* ```powershell PS C:\> docker rmi $(docker images --filter “dangling=true” -q --no-trunc) ``` #### - `docker image prune:`: *Remove all unused images* ```powershell PS C:\> docker image prune ```]]></content><author><name></name></author><category term="docker"/><category term="docker"/><category term="docker-compose"/><summary type="html"><![CDATA[docker summary and the main commands used]]></summary></entry><entry><title type="html">a post with code diff</title><link href="https://leokarian.github.io/blog/2024/code-diff/" rel="alternate" type="text/html" title="a post with code diff"/><published>2024-01-27T19:22:00+00:00</published><updated>2024-01-27T19:22:00+00:00</updated><id>https://leokarian.github.io/blog/2024/code-diff</id><content type="html" xml:base="https://leokarian.github.io/blog/2024/code-diff/"><![CDATA[You can display diff code by using the regular markdown syntax: ````markdown ```diff diff --git a/sample.js b/sample.js index 0000001..0ddf2ba --- a/sample.js +++ b/sample.js @@ -1 +1 @@ -console.log("Hello World!") +console.log("Hello from Diff2Html!") ``` ```` Which generates: ```diff diff --git a/sample.js b/sample.js index 0000001..0ddf2ba --- a/sample.js +++ b/sample.js @@ -1 +1 @@ -console.log("Hello World!") +console.log("Hello from Diff2Html!") ``` But this is difficult to read, specially if you have a large diff. You can use [diff2html](https://diff2html.xyz/) to display a more readable version of the diff. For this, just use `diff2html` instead of `diff` for the code block language: ````markdown ```diff2html diff --git a/sample.js b/sample.js index 0000001..0ddf2ba --- a/sample.js +++ b/sample.js @@ -1 +1 @@ -console.log("Hello World!") +console.log("Hello from Diff2Html!") ``` ```` If we use a longer example, for example [this commit from diff2html](https://github.com/rtfpessoa/diff2html/commit/c2c253d3e3f8b8b267f551e659f72b44ca2ac927), it will generate the following output: ```diff2html From 2aaae31cc2a37bfff83430c2c914b140bee59b6a Mon Sep 17 00:00:00 2001 From: Rodrigo Fernandes <rtfrodrigo@gmail.com> Date: Sun, 9 Oct 2016 16:41:54 +0100 Subject: [PATCH 1/2] Initial template override support --- scripts/hulk.js | 4 ++-- src/diff2html.js | 3 +-- src/file-list-printer.js | 11 ++++++++--- src/hoganjs-utils.js | 29 +++++++++++++++++------------ src/html-printer.js | 6 ++++++ src/line-by-line-printer.js | 6 +++++- src/side-by-side-printer.js | 6 +++++- test/file-list-printer-tests.js | 2 +- test/hogan-cache-tests.js | 18 +++++++++++++++--- test/line-by-line-tests.js | 3 +-- test/side-by-side-printer-tests.js | 3 +-- 11 files changed, 62 insertions(+), 29 deletions(-) diff --git a/scripts/hulk.js b/scripts/hulk.js index 5a793c18..a4b1a4d5 100755 --- a/scripts/hulk.js +++ b/scripts/hulk.js @@ -173,11 +173,11 @@ function namespace(name) { // write a template foreach file that matches template extension templates = extractFiles(options.argv.remain) .map(function(file) { - var openedFile = fs.readFileSync(file, 'utf-8'); + var openedFile = fs.readFileSync(file, 'utf-8').trim(); var name; if (!openedFile) return; name = namespace(path.basename(file).replace(/\..*$/, '')); - openedFile = removeByteOrderMark(openedFile.trim()); + openedFile = removeByteOrderMark(openedFile); openedFile = wrap(file, name, openedFile); if (!options.outputdir) return openedFile; fs.writeFileSync(path.join(options.outputdir, name + '.js') diff --git a/src/diff2html.js b/src/diff2html.js index 21b0119e..64e138f5 100644 --- a/src/diff2html.js +++ b/src/diff2html.js @@ -7,7 +7,6 @@ (function() { var diffParser = require('./diff-parser.js').DiffParser; - var fileLister = require('./file-list-printer.js').FileListPrinter; var htmlPrinter = require('./html-printer.js').HtmlPrinter; function Diff2Html() { @@ -43,7 +42,7 @@ var fileList = ''; if (configOrEmpty.showFiles === true) { - fileList = fileLister.generateFileList(diffJson, configOrEmpty); + fileList = htmlPrinter.generateFileListSummary(diffJson, configOrEmpty); } var diffOutput = ''; diff --git a/src/file-list-printer.js b/src/file-list-printer.js index e408d9b2..1e0a2c61 100644 --- a/src/file-list-printer.js +++ b/src/file-list-printer.js @@ -8,11 +8,16 @@ (function() { var printerUtils = require('./printer-utils.js').PrinterUtils; - var hoganUtils = require('./hoganjs-utils.js').HoganJsUtils; + var hoganUtils; + var baseTemplatesPath = 'file-summary'; var iconsBaseTemplatesPath = 'icon'; - function FileListPrinter() { + function FileListPrinter(config) { + this.config = config; + + var HoganJsUtils = require('./hoganjs-utils.js').HoganJsUtils; + hoganUtils = new HoganJsUtils(config); } FileListPrinter.prototype.generateFileList = function(diffFiles) { @@ -38,5 +43,5 @@ }); }; - module.exports.FileListPrinter = new FileListPrinter(); + module.exports.FileListPrinter = FileListPrinter; })(); diff --git a/src/hoganjs-utils.js b/src/hoganjs-utils.js index 9949e5fa..0dda08d7 100644 --- a/src/hoganjs-utils.js +++ b/src/hoganjs-utils.js @@ -8,18 +8,19 @@ (function() { var fs = require('fs'); var path = require('path'); - var hogan = require('hogan.js'); var hoganTemplates = require('./templates/diff2html-templates.js'); - var templatesPath = path.resolve(__dirname, 'templates'); + var extraTemplates; - function HoganJsUtils() { + function HoganJsUtils(configuration) { + this.config = configuration || {}; + extraTemplates = this.config.templates || {}; } - HoganJsUtils.prototype.render = function(namespace, view, params, configuration) { - var template = this.template(namespace, view, configuration); + HoganJsUtils.prototype.render = function(namespace, view, params) { + var template = this.template(namespace, view); if (template) { return template.render(params); } @@ -27,17 +28,16 @@ return null; }; - HoganJsUtils.prototype.template = function(namespace, view, configuration) { - var config = configuration || {}; + HoganJsUtils.prototype.template = function(namespace, view) { var templateKey = this._templateKey(namespace, view); - return this._getTemplate(templateKey, config); + return this._getTemplate(templateKey); }; - HoganJsUtils.prototype._getTemplate = function(templateKey, config) { + HoganJsUtils.prototype._getTemplate = function(templateKey) { var template; - if (!config.noCache) { + if (!this.config.noCache) { template = this._readFromCache(templateKey); } @@ -53,6 +53,7 @@ try { if (fs.readFileSync) { + var templatesPath = path.resolve(__dirname, 'templates'); var templatePath = path.join(templatesPath, templateKey); var templateContent = fs.readFileSync(templatePath + '.mustache', 'utf8'); template = hogan.compile(templateContent); @@ -66,12 +67,16 @@ }; HoganJsUtils.prototype._readFromCache = function(templateKey) { - return hoganTemplates[templateKey]; + return extraTemplates[templateKey] || hoganTemplates[templateKey]; }; HoganJsUtils.prototype._templateKey = function(namespace, view) { return namespace + '-' + view; }; - module.exports.HoganJsUtils = new HoganJsUtils(); + HoganJsUtils.prototype.compile = function(templateStr) { + return hogan.compile(templateStr); + }; + + module.exports.HoganJsUtils = HoganJsUtils; })(); diff --git a/src/html-printer.js b/src/html-printer.js index 585d5b66..13f83047 100644 --- a/src/html-printer.js +++ b/src/html-printer.js @@ -8,6 +8,7 @@ (function() { var LineByLinePrinter = require('./line-by-line-printer.js').LineByLinePrinter; var SideBySidePrinter = require('./side-by-side-printer.js').SideBySidePrinter; + var FileListPrinter = require('./file-list-printer.js').FileListPrinter; function HtmlPrinter() { } @@ -22,5 +23,10 @@ return sideBySidePrinter.generateSideBySideJsonHtml(diffFiles); }; + HtmlPrinter.prototype.generateFileListSummary = function(diffJson, config) { + var fileListPrinter = new FileListPrinter(config); + return fileListPrinter.generateFileList(diffJson); + }; + module.exports.HtmlPrinter = new HtmlPrinter(); })(); diff --git a/src/line-by-line-printer.js b/src/line-by-line-printer.js index b07eb53c..d230bedd 100644 --- a/src/line-by-line-printer.js +++ b/src/line-by-line-printer.js @@ -11,7 +11,8 @@ var utils = require('./utils.js').Utils; var Rematch = require('./rematch.js').Rematch; - var hoganUtils = require('./hoganjs-utils.js').HoganJsUtils; + var hoganUtils; + var genericTemplatesPath = 'generic'; var baseTemplatesPath = 'line-by-line'; var iconsBaseTemplatesPath = 'icon'; @@ -19,6 +20,9 @@ function LineByLinePrinter(config) { this.config = config; + + var HoganJsUtils = require('./hoganjs-utils.js').HoganJsUtils; + hoganUtils = new HoganJsUtils(config); } LineByLinePrinter.prototype.makeFileDiffHtml = function(file, diffs) { diff --git a/src/side-by-side-printer.js b/src/side-by-side-printer.js index bbf1dc8d..5e3033b3 100644 --- a/src/side-by-side-printer.js +++ b/src/side-by-side-printer.js @@ -11,7 +11,8 @@ var utils = require('./utils.js').Utils; var Rematch = require('./rematch.js').Rematch; - var hoganUtils = require('./hoganjs-utils.js').HoganJsUtils; + var hoganUtils; + var genericTemplatesPath = 'generic'; var baseTemplatesPath = 'side-by-side'; var iconsBaseTemplatesPath = 'icon'; @@ -26,6 +27,9 @@ function SideBySidePrinter(config) { this.config = config; + + var HoganJsUtils = require('./hoganjs-utils.js').HoganJsUtils; + hoganUtils = new HoganJsUtils(config); } SideBySidePrinter.prototype.makeDiffHtml = function(file, diffs) { diff --git a/test/file-list-printer-tests.js b/test/file-list-printer-tests.js index a502a46f..60ea3208 100644 --- a/test/file-list-printer-tests.js +++ b/test/file-list-printer-tests.js @@ -1,6 +1,6 @@ var assert = require('assert'); -var fileListPrinter = require('../src/file-list-printer.js').FileListPrinter; +var fileListPrinter = new (require('../src/file-list-printer.js').FileListPrinter)(); describe('FileListPrinter', function() { describe('generateFileList', function() { diff --git a/test/hogan-cache-tests.js b/test/hogan-cache-tests.js index 190bf6f8..3bb754ac 100644 --- a/test/hogan-cache-tests.js +++ b/test/hogan-cache-tests.js @@ -1,6 +1,6 @@ var assert = require('assert'); -var HoganJsUtils = require('../src/hoganjs-utils.js').HoganJsUtils; +var HoganJsUtils = new (require('../src/hoganjs-utils.js').HoganJsUtils)(); var diffParser = require('../src/diff-parser.js').DiffParser; describe('HoganJsUtils', function() { @@ -21,16 +21,28 @@ describe('HoganJsUtils', function() { }); assert.equal(emptyDiffHtml, result); }); + it('should render view without cache', function() { var result = HoganJsUtils.render('generic', 'empty-diff', { contentClass: 'd2h-code-line', diffParser: diffParser }, {noCache: true}); - assert.equal(emptyDiffHtml + '\n', result); + assert.equal(emptyDiffHtml, result); }); + it('should return null if template is missing', function() { - var result = HoganJsUtils.render('generic', 'missing-template', {}, {noCache: true}); + var hoganUtils = new (require('../src/hoganjs-utils.js').HoganJsUtils)({noCache: true}); + var result = hoganUtils.render('generic', 'missing-template', {}); assert.equal(null, result); }); + + it('should allow templates to be overridden', function() { + var emptyDiffTemplate = HoganJsUtils.compile('<p>{{myName}}</p>'); + + var config = {templates: {'generic-empty-diff': emptyDiffTemplate}}; + var hoganUtils = new (require('../src/hoganjs-utils.js').HoganJsUtils)(config); + var result = hoganUtils.render('generic', 'empty-diff', {myName: 'Rodrigo Fernandes'}); + assert.equal('<p>Rodrigo Fernandes</p>', result); + }); }); }); diff --git a/test/line-by-line-tests.js b/test/line-by-line-tests.js index 1cd92073..8869b3df 100644 --- a/test/line-by-line-tests.js +++ b/test/line-by-line-tests.js @@ -14,7 +14,7 @@ describe('LineByLinePrinter', function() { ' File without changes\n' + ' </div>\n' + ' </td>\n' + - '</tr>\n'; + '</tr>'; assert.equal(expected, fileHtml); }); @@ -422,7 +422,6 @@ describe('LineByLinePrinter', function() { ' </div>\n' + ' </td>\n' + '</tr>\n' + - '\n' + ' </tbody>\n' + ' </table>\n' + ' </div>\n' + diff --git a/test/side-by-side-printer-tests.js b/test/side-by-side-printer-tests.js index 76625f8e..771daaa5 100644 --- a/test/side-by-side-printer-tests.js +++ b/test/side-by-side-printer-tests.js @@ -14,7 +14,7 @@ describe('SideBySidePrinter', function() { ' File without changes\n' + ' </div>\n' + ' </td>\n' + - '</tr>\n'; + '</tr>'; assert.equal(expectedRight, fileHtml.right); assert.equal(expectedLeft, fileHtml.left); @@ -324,7 +324,6 @@ describe('SideBySidePrinter', function() { ' </div>\n' + ' </td>\n' + '</tr>\n' + - '\n' + ' </tbody>\n' + ' </table>\n' + ' </div>\n' + From f3cadb96677d0eb82fc2752dc3ffbf35ca9b5bdb Mon Sep 17 00:00:00 2001 From: Rodrigo Fernandes <rtfrodrigo@gmail.com> Date: Sat, 15 Oct 2016 13:21:22 +0100 Subject: [PATCH 2/2] Allow uncompiled templates --- README.md | 3 +++ src/hoganjs-utils.js | 7 +++++++ test/hogan-cache-tests.js | 24 +++++++++++++++++++++++- 3 files changed, 33 insertions(+), 1 deletion(-) diff --git a/README.md b/README.md index 132c8a28..46909f25 100644 --- a/README.md +++ b/README.md @@ -98,6 +98,9 @@ The HTML output accepts a Javascript object with configuration. Possible options - `synchronisedScroll`: scroll both panes in side-by-side mode: `true` or `false`, default is `false` - `matchWordsThreshold`: similarity threshold for word matching, default is 0.25 - `matchingMaxComparisons`: perform at most this much comparisons for line matching a block of changes, default is `2500` + - `templates`: object with previously compiled templates to replace parts of the html + - `rawTemplates`: object with raw not compiled templates to replace parts of the html + > For more information regarding the possible templates look into [src/templates](https://github.com/rtfpessoa/diff2html/tree/master/src/templates) ## Diff2HtmlUI Helper diff --git a/src/hoganjs-utils.js b/src/hoganjs-utils.js index 0dda08d7..b2e9c275 100644 --- a/src/hoganjs-utils.js +++ b/src/hoganjs-utils.js @@ -17,6 +17,13 @@ function HoganJsUtils(configuration) { this.config = configuration || {}; extraTemplates = this.config.templates || {}; + + var rawTemplates = this.config.rawTemplates || {}; + for (var templateName in rawTemplates) { + if (rawTemplates.hasOwnProperty(templateName)) { + if (!extraTemplates[templateName]) extraTemplates[templateName] = this.compile(rawTemplates[templateName]); + } + } } HoganJsUtils.prototype.render = function(namespace, view, params) { diff --git a/test/hogan-cache-tests.js b/test/hogan-cache-tests.js index 3bb754ac..a34839c0 100644 --- a/test/hogan-cache-tests.js +++ b/test/hogan-cache-tests.js @@ -36,7 +36,7 @@ describe('HoganJsUtils', function() { assert.equal(null, result); }); - it('should allow templates to be overridden', function() { + it('should allow templates to be overridden with compiled templates', function() { var emptyDiffTemplate = HoganJsUtils.compile('<p>{{myName}}</p>'); var config = {templates: {'generic-empty-diff': emptyDiffTemplate}}; @@ -44,5 +44,27 @@ describe('HoganJsUtils', function() { var result = hoganUtils.render('generic', 'empty-diff', {myName: 'Rodrigo Fernandes'}); assert.equal('<p>Rodrigo Fernandes</p>', result); }); + + it('should allow templates to be overridden with uncompiled templates', function() { + var emptyDiffTemplate = '<p>{{myName}}</p>'; + + var config = {rawTemplates: {'generic-empty-diff': emptyDiffTemplate}}; + var hoganUtils = new (require('../src/hoganjs-utils.js').HoganJsUtils)(config); + var result = hoganUtils.render('generic', 'empty-diff', {myName: 'Rodrigo Fernandes'}); + assert.equal('<p>Rodrigo Fernandes</p>', result); + }); + + it('should allow templates to be overridden giving priority to compiled templates', function() { + var emptyDiffTemplate = HoganJsUtils.compile('<p>{{myName}}</p>'); + var emptyDiffTemplateUncompiled = '<p>Not used!</p>'; + + var config = { + templates: {'generic-empty-diff': emptyDiffTemplate}, + rawTemplates: {'generic-empty-diff': emptyDiffTemplateUncompiled} + }; + var hoganUtils = new (require('../src/hoganjs-utils.js').HoganJsUtils)(config); + var result = hoganUtils.render('generic', 'empty-diff', {myName: 'Rodrigo Fernandes'}); + assert.equal('<p>Rodrigo Fernandes</p>', result); + }); }); }); ```]]></content><author><name></name></author><category term="sample-posts"/><category term="formatting"/><category term="code"/><summary type="html"><![CDATA[this is how you can display code diffs]]></summary></entry><entry><title type="html">a post with redirect</title><link href="https://leokarian.github.io/blog/2022/redirect/" rel="alternate" type="text/html" title="a post with redirect"/><published>2022-02-01T17:39:00+00:00</published><updated>2022-02-01T17:39:00+00:00</updated><id>https://leokarian.github.io/blog/2022/redirect</id><content type="html" xml:base="https://leokarian.github.io/blog/2022/redirect/"><![CDATA[Redirecting to another page or file. Note that pages without any text, with very short texts or formed only by words without much meaning can cause problems for the [generation of related posts](https://github.com/jekyll/classifier-reborn/issues/64#issuecomment-221651255).]]></content><author><name></name></author><summary type="html"><![CDATA[you can also redirect to assets like pdf]]></summary></entry></feed>